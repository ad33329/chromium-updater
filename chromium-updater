#!/usr/bin/env python3

# Trivial Chromium automatic downloader specific to Woolyss build
# copyright (C) 2017 GNU GPLv3 or later
# TODO: track version of chromium currently installed
# TODO: add argument to skip SHA1 checksum generation
# TODO: add argument to skip prompts, e.g. for automation
# TODO: add argument to silence output
# TODO: add logging features
# TODO: add dry run option for debugging


# non-builtin libraries needed:
# beautifulsoup4 & feedparser
# I recommend that you install via pip

from bs4 import BeautifulSoup
from urllib import request
from hashlib import sha1
import tempfile, os, sys, feedparser

'''
generates progress display for request.retrieve to hook into
'''
def downloadProgress(count, blockSize, totalSize):
    percent = int(count * blockSize * 100 / totalSize)
    sys.stdout.write("\r%2d%%" % percent)
    sys.stdout.flush()

'''
Stolen from somewhere on stack overflow
'''
def sha1_file(filepath):
    import hashlib
    sha = hashlib.sha1()
    with open(filepath, 'rb') as f:
        while True:
            block = f.read(2**10) # Magic number: one-megabyte blocks.
            if not block: break
            sha.update(block)
        return sha.hexdigest()

'''
generates a simple prompt
TODO: implement functionality for defaulting to NO
'''
def promptUserYN(prompt):
    inp = input("%s [Y/n] " % prompt)

    # by default interpret null choice as 'yes'
    if not inp.strip():
        inp = 'y'
        # if we are given actual input, only pay attention
        # to the first char, and  ignore case
    else:
        inp = inp[0].lower()
    return inp

'''
extractStableSyncChromeURL
extracts chrome URL from woolyss' source RSS feed with the following traits:
* stable
* sync features enabled
* compiled for Windows
* binary installer version
'''
def extractStableSyncChromeURL(source):
    found_links = []
    feed = feedparser.parse(source)
    for i in feed["entries"]:
        # title is lower cased to make search case insensitive
        title = i["title"].lower()
        # make sure we are getting the 64-bit non-portable Windows version
        # this is of course very breakable, so watch it
        if "64-bit" in title and "windows" in title and not "portable" in title:
            summary = i["summary"]
            # make sure we are getting the stable version
            if "Stable" in summary:
                # summary contains mess of HTML
                # extract links from <a> tags, and look for one containing
                # chromium-sync.exe

                # this is the executable for installing chromium with sync abilities
                # and blah blah blah
                soup = BeautifulSoup(summary, "html.parser")
                for link in soup.find_all('a'):
                    link = link.get("href")
                    if "chromium-sync.exe" in link:
                        found_links += [link]
                        # we stop searching after the first valid link in the summary of the post
                        # because the rest of them are probably LKGR etc
                        break
    return found_links


source = "https://chromium.woolyss.com/feed/windows-64-bit"

links = extractStableSyncChromeURL(source)

# sort automatically (should put latest first)
links = sorted(links)
# display found URLs neatly
print("URLs found:\n" + '\n'.join(links))
# last URL should be latest
latest_link =  links[-1]
print("I believe this is the latest URL:\n" + latest_link)

inp = promptUserYN("Do you want to download?")

# if user chose to proceed
if inp == 'y':
    # set up temporary path and get cooking
    tmpdir = tempfile.gettempdir()
    print("Found temporary directory: " + tmpdir)
    tmppath = os.path.join(tmpdir, "chromium-installer.exe")
    print("Attempting to save file as: " + tmppath)
    request.urlretrieve(latest_link, tmppath, reporthook=downloadProgress)
    # calculate and display checksum
    sha1sum = sha1_file(tmppath)
    print("\nSHA1: %s\n" % sha1sum)
    del inp
    inp2 = promptUserYN("Proceed to execute installer? (will kill any instance of chromium)")
    if inp2 == 'y':
        os.system("taskkill /im chrome.exe")
        print("Executing installer...")
        os.system(tmppath)
        print("Done.")
    else:
        # graceful aborts
        print('File remains at "%s". Do what you will' % tmppath)
        exit(0)
else:
    # graceful abort
    print("User chose to cancel. Exiting!")
    exit(0)
